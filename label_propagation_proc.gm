/****************************************************** 
*   def  Algorithm_1:
*   	initialize labels : for each v in V , l(v)[0]=v
*   	i=0
*   	while(!stop_criteria) do:
*        	i++
*        	propogation:
*           		for each v in V do
*             			 l(v)[i] = argmax over l sum(over all neighbors of v) {l(v)[i-1]== l}
*           		end
*  	 end
*   	return final labeling : l(v)[t] for each v in V, 
*        		    where t is the last executed step
*   
*   def stop_criteria:
*	if either l(v)[i]= l(v)[i-1] for each v in V
*           or l(v)[i]= l(v)[i-2] for each v in V
*           return True
*

**********************************************************/
//procedure label_propagation(g:graph,name:N_P <int> ;label: nodeProp <int>)
procedure label_propagation(g:graph, ID : N_P <int>(g); label: N_P <int>(g)): int
{
 bool stop=false;
 nodeProp <int>(g) label_1;
 nodeProp <int>(g) label_2;
 int i=0;
 bool mainStop=false;
 int max_key=0;
 bool l1_stop;
 bool l2_stop;
 int max_val,j;
 map<int,int> neighbours;
 if( g.numNodes()<=1 ) return 0;

 //let the initial labels be equal to the names of the nodes/vertices
  foreach(n : g.nodes)
   {
	n.label= n.ID;
   }


 //algo1 starts
 do
 {      i++;
	mainStop=false;	
	l1_stop=true;
	l2_stop=true;
	foreach(n:g.nodes)
		{
			if((n.label!=n.label_1))
				l1_stop=false;
		}
	foreach(n:g.nodes)
                {
                        if((n.label!=n.label_2))
                                l2_stop=false;
                }
	if(!(l1_stop || l2_stop))
	{

 	for(n:g.nodes)
  		{ 
		neighbours.clear();
		neighbours[n.label]=1;
   		for(s:n.nbrs)
   		{
			if(neighbours.hasKey(s.label))
      				neighbours[s.label]+=1;
			else
				neighbours[s.label]=1;
   		}      
		max_val=0;
		max_key=0;
		j=0;
		max_key= neighbours.getMaxKey();
/*
		while(j<neighbours.size())
  		{
			if(max_val<=neighbours[j])
   			{
				max_key=j;  // since it is iterating in a seq, no need to check if l>l', since i<i+1
				max_val=neighbours[j];
   			}
  			j++;
  		}  
*/		foreach(s1:n.nbrs)
  		{
      			//label the neighbours
        		s1.label_2=s1.label_1;
			s1.label_1=s1.label;
			s1.label=max_key;
  		}
   		//label the node n
        	n.label_2=n.label_1;
       		n.label_1=n.label;
        	n.label=max_key;
  		}
   
 	}
	else 
		mainStop=true;
        }while(!mainStop && i<2);

return i;
}

